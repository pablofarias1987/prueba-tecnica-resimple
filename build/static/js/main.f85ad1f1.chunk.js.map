{"version":3,"sources":["serviceWorker.js","index.js","componentes/Datos.js"],"names":["Boolean","window","location","hostname","match","ReactDOM","render","useState","data","setData","enterprise","setEmployees","useEffect","fetch","then","response","json","input","useDatos","className","align","scope","map","item","key","ID_EMPRESA","NOMBRE_EMPRESA","AREAS","NOMBRE_AREAS","type","accept","onChange","e","reader","FileReader","readAsBinaryString","target","files","onload","result","workbook","XLSX","sheetName","SheetNames","sheet","Sheets","parsedData","sheet_to_json","length","Object","keys","row","index","values","value","href","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCRNC,IAASC,OAAO,mBCOD,WAAkB,IAAD,EACNC,mBAAS,IADH,mBACvBC,EADuB,KACjBC,EADiB,KAgBxBC,EA9BR,WAAqB,IAAD,EACiBH,mBAAS,IAD1B,mBACXG,EADW,KACCC,EADD,KAWlB,OARAC,qBAAU,WACRC,MAAM,wBACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJN,EAAaM,QAEhB,IAEIP,EAmBYQ,GAEnB,OACE,yBAAKC,UAAU,iBAAiBC,MAAM,UAEpC,iDAEA,yBAAKD,UAAU,OAEb,yBAAKA,UAAU,aAEb,2BAAOA,UAAU,wBACf,2BAAOA,UAAU,cACf,4BACE,wBAAIE,MAAM,OAAV,MACA,wBAAIA,MAAM,OAAV,UACA,wBAAIA,MAAM,OAAV,YAGJ,+BAECX,EAAWY,KAAI,SAAAC,GAAI,OAElB,wBAAIC,IAAKD,EAAKE,YACZ,4BAAKF,EAAKE,YACV,4BAAKF,EAAKG,gBACV,4BAAKH,EAAKI,MAAMC,qBAY5B,2BACEC,KAAK,OACLC,OAAO,cACPC,SAtDqB,SAACC,GACxB,IAAMC,EAAS,IAAIC,WACnBD,EAAOE,mBAAmBH,EAAEI,OAAOC,MAAM,IACzCJ,EAAOK,OAAS,SAACN,GACf,IAAMxB,EAAOwB,EAAEI,OAAOG,OAChBC,EAAWC,IAAUjC,EAAM,CAAEqB,KAAM,WACnCa,EAAYF,EAASG,WAAW,GAChCC,EAAQJ,EAASK,OAAOH,GACxBI,EAAaL,IAAWM,cAAcH,GAC5CnC,EAAQqC,OAgDTtC,EAAKwC,OAAS,GACb,2BAAO7B,UAAU,SACf,+BACE,4BACG8B,OAAOC,KAAK1C,EAAK,IAAIc,KAAI,SAACE,GAAD,OACxB,wBAAIA,IAAKA,GAAMA,QAIrB,+BACGhB,EAAKc,KAAI,SAAC6B,EAAKC,GAAN,OACR,wBAAI5B,IAAK4B,GACNH,OAAOI,OAAOF,GAAK7B,KAAI,SAACgC,EAAOF,GAAR,OACtB,wBAAI5B,IAAK4B,GAAQE,YAQ7B,6BAAM,6BA1DJ,qBA+DA,6BAASnC,UAAU,aACjB,yBAAKC,MAAM,UAAX,oBACqB,uBAAGmC,KAAK,8DAA8DnB,OAAO,UAA7E,8BD/Fb,MAAWoB,SAASC,eAAe,SDyH7C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9C,MAAK,SAAA+C,GACjCA,EAAaC,iB","file":"static/js/main.f85ad1f1.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Datos from './componentes/Datos';\nimport * as serviceWorker from './serviceWorker';\n\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport '../node_modules/bootstrap/dist/js/bootstrap.min.js';\n\n\nReactDOM.render(<Datos />, document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { useEffect, useState } from \"react\"\nimport * as XLSX from \"xlsx\";\n\nfunction useDatos() {\n  const [enterprise, setEmployees] = useState([])\n\n  useEffect(() => {\n    fetch(\"json/enterprise.json\")\n      .then(response => response.json())\n      .then(input => {\n        setEmployees(input)\n      })\n  }, [])\n\n  return enterprise\n}\n\nexport default function Datos() {\n  const [data, setData] = useState([]);\n  \n  const handleFileUpload = (e) => {\n    const reader = new FileReader();\n    reader.readAsBinaryString(e.target.files[0]);\n    reader.onload = (e) => {\n      const data = e.target.result;\n      const workbook = XLSX.read(data, { type: \"binary\" });\n      const sheetName = workbook.SheetNames[0];\n      const sheet = workbook.Sheets[sheetName];\n      const parsedData = XLSX.utils.sheet_to_json(sheet);\n      setData(parsedData);\n    };\n  }\n\n  const enterprise = useDatos()\n\n  return (\n    <div className=\"container mt-5\" align=\"center\">\n      \n      <h4>List of Employees</h4>\n        \n      <div className=\"row\">\n\n        <div className=\"col-md-12\">\n\n          <table className=\"table table-bordered\">\n            <thead className=\"thead-dark\">\n              <tr>\n                <th scope=\"col\">ID</th>\n                <th scope=\"col\">Nombre</th>\n                <th scope=\"col\">Nombre</th>\n              </tr>\n            </thead> \n            <tbody>\n\n            {enterprise.map(item => (\n\n              <tr key={item.ID_EMPRESA}>\n                <td>{item.ID_EMPRESA}</td>\n                <td>{item.NOMBRE_EMPRESA}</td>\n                <td>{item.AREAS.NOMBRE_AREAS}</td>\n              </tr>\n\n            ))}\n\n            </tbody>\n\n          </table>\n\n        </div>\n\n\n    <input \n      type=\"file\" \n      accept=\".xlsx, .xls\" \n      onChange={handleFileUpload} \n    />\n\n    {data.length > 0 && (\n      <table className=\"table\">\n        <thead>\n          <tr>\n            {Object.keys(data[0]).map((key) => (\n              <th key={key}>{key}</th>\n            ))}\n          </tr>\n        </thead>\n        <tbody>\n          {data.map((row, index) => (\n            <tr key={index}>\n              {Object.values(row).map((value, index) => (\n                <td key={index}>{value}</td>\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    )}\n\n    <br /><br />\n    ... Employees ...\n  </div>\n\n\n      <section className=\"mt-5 mb-5\">\n        <div align=\"center\">\n            Desarrollado por <a href=\"https://www.linkedin.com/in/pablo-farias-gallardo-3355a8b8/\" target=\"_blank\">Pablo Farias Gallardo</a>\n        </div> \n      </section>\n        \n    </div>\n\n  )\n}"],"sourceRoot":""}